{"version":3,"file":"mdl-dialog-outlet.service.js","sourceRoot":"","sources":["../../../src/lib/components/dialog-outlet/mdl-dialog-outlet.service.ts"],"names":[],"mappings":"OAAO,EAAoB,UAAU,EAAE,cAAc,EAAE,wBAAwB,EAAE,YAAY,EAAE,MAAM,eAAe;OAC7G,EAAE,wBAAwB,EAAE,MAAM,+BAA+B;OACjE,EAAE,2BAA2B,EAAE,MAAM,kCAAkC;AAI9E;IAOE,gCACU,MAAsB,EACtB,wBAAkD;QADlD,WAAM,GAAN,MAAM,CAAgB;QACtB,6BAAwB,GAAxB,wBAAwB,CAA0B;QAJrD,yBAAoB,GAAsB,IAAI,YAAY,EAAE,CAAC;QAKlE,IAAI,mBAAmB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC;YACH,mBAAmB,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC;QACxE,CAAE;QAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAEb,CAAC;QACD,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;QAC1E,CAAC;IACH,CAAC;IAEM,2DAA0B,GAAjC,UAAkC,KAAuB;QACvD,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAED,sBAAW,oDAAgB;aAA3B;YACE,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;QAChC,CAAC;;;OAAA;IAEO,oDAAmB,GAA3B,UAA4B,KAAuB;QAAnD,iBAUC;QATC,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;QAE/B,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAC3B,IAAI,QAAQ,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,2BAA2B,CAAC,CAAC;YAClG,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;YAClF,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,SAAS,CAAE;gBAC5C,KAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;YACnC,CAAC,CAAC,CAAA;QACJ,CAAC;IACH,CAAC;IAEM,6CAAY,GAAnB;QACE,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;IAC/B,CAAC;IAEM,uDAAsB,GAA7B,UAA8B,MAAc;QAC1C,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IAC/C,CAAC;IACI,iCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,qCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,cAAc,GAAG;QACxB,EAAC,IAAI,EAAE,wBAAwB,GAAG;KACjC,EAH6F,CAG7F,CAAC;IACF,6BAAC;AAAD,CAAC,AAxDD,IAwDC","sourcesContent":["import { ViewContainerRef, Injectable, ApplicationRef, ComponentFactoryResolver, EventEmitter } from '@angular/core';\nimport { MdlDialogOutletComponent } from './mdl-dialog-outlet.component';\nimport { MdlBackdropOverlayComponent } from './mdl-backdrop-overlay.component';\n\n\n\nexport class MdlDialogOutletService {\n\n  private viewContainerRef_: ViewContainerRef;\n  private backdropComponet: MdlBackdropOverlayComponent;\n\n  public backdropClickEmitter: EventEmitter<any> = new EventEmitter();\n\n  constructor(\n    private appRef: ApplicationRef,\n    private componentFactoryResolver: ComponentFactoryResolver) {\n    let dialogOutletCompRef = null;\n    try {\n      dialogOutletCompRef = this.appRef.bootstrap(MdlDialogOutletComponent);\n    } catch (e) {\n      // the user did not use the dialog.outlet element outside of his root app.\n    }\n    if (dialogOutletCompRef) {\n      this.setViewContainerRef(dialogOutletCompRef.instance.viewContainerRef);\n    }\n  }\n\n  public setDefaultViewContainerRef(vCRef: ViewContainerRef) {\n    this.setViewContainerRef(vCRef);\n  }\n\n  public get viewContainerRef(): ViewContainerRef {\n    return this.viewContainerRef_;\n  }\n\n  private setViewContainerRef(value: ViewContainerRef) {\n    this.viewContainerRef_ = value;\n\n    if (this.viewContainerRef_) {\n      let cFactory = this.componentFactoryResolver.resolveComponentFactory(MdlBackdropOverlayComponent);\n      this.backdropComponet = this.viewContainerRef_.createComponent(cFactory).instance;\n      this.backdropComponet.clickEmitter.subscribe( () => {\n        this.backdropClickEmitter.emit();\n      })\n    }\n  }\n\n  public hideBackdrop() {\n    this.backdropComponet.hide();\n  }\n\n  public showBackdropWithZIndex(zIndex: number) {\n    this.backdropComponet.showWithZIndex(zIndex);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ApplicationRef, },\n{type: ComponentFactoryResolver, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}