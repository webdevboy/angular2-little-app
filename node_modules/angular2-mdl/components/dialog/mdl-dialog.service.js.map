{"version":3,"file":"mdl-dialog.service.js","sourceRoot":"","sources":["../../../src/lib/components/dialog/mdl-dialog.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Inject,\n  Injectable,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Type,\n  ReflectiveInjector,\n  OpaqueToken,\n  Provider,\n  ApplicationRef,\n  ViewContainerRef,\n  TemplateRef,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\n\nimport { MdlSimpleDialogComponent } from './mdl-simple-dialog.component';\nimport { MdlDialogHostComponent } from './mdl-dialog-host.component';\nimport {\n  IMdlDialogConfiguration,\n  IMdlCustomDialogConfiguration,\n  IMdlSimpleDialogConfiguration\n} from './mdl-dialog-configuration';\nimport { InternalMdlDialogReference } from './internal-dialog-reference';\nimport { MdlDialogOutletService } from '../dialog-outlet/mdl-dialog-outlet.service';\n\n\n\nexport const MDL_CONFIGUARTION = new OpaqueToken('MDL_CONFIGUARTION');\nexport const MIN_DIALOG_Z_INDEX = 100000;\n\n/**\n * The reference to the created and displayed dialog.\n */\nexport class MdlDialogReference {\n\n  constructor(private internaleRef: InternalMdlDialogReference) {\n    internaleRef.dialogRef = this;\n  }\n\n  /**\n   * closes the dialog\n   */\n  public hide(data?: any) {\n    this.internaleRef.hide(data);\n  }\n\n  /**\n   * Observable that emits, if the dialog was closed.\n   * @returns {Observable<void>}\n   */\n  public onHide(): Observable<void> {\n    return this.internaleRef.onHide();\n  }\n\n  /**\n   * Observable that emits, if the dialog is really visible and not only created.\n   * @returns {Observable<void>}\n   */\n  public onVisible(): Observable<void> {\n    return this.internaleRef.onVisible();\n  }\n}\n\n/**\n * The MdlDialogService is used to open different kind of dialogs. SimpleDialogs and Custom Dialogs.\n * @experimental\n  */\n\n\nexport class MdlDialogService {\n\n  private openDialogs = new Array<InternalMdlDialogReference>();\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n     private doc: any,\n    private appRef: ApplicationRef,\n    private mdlDialogOutletService: MdlDialogOutletService) {\n\n    this.mdlDialogOutletService.backdropClickEmitter.subscribe( () => {\n      this.onBackdropClick();\n    });\n  }\n\n  /**\n   * Shows a dialog that is just an alert - e.g. with one button.\n   * @param alertMessage The message that should be displayed.\n   * @param okTex The text that the button should have\n   * @param title The optional title of the dialog\n   * @returns An Observable that is called if the user hits the Ok button.\n   */\n  public alert(alertMessage: string, okText = 'Ok', title?: string): Observable<void> {\n    let result: Subject<any> = new Subject();\n\n    this.showDialog({\n        title: title,\n        message: alertMessage,\n        actions: [\n          { handler: () => {\n            result.next(null);\n            result.complete();\n          }, text: okText}\n        ],\n        isModal: true\n      });\n\n    return result;\n  }\n\n  /**\n   * Shows a dialog that is just a confirm message - e.g. with two button.\n   * @param question The question that should be displayed.\n   * @param title The title that should be displayed on top of Question.\n   * @param declineText The text for decline button. defaults to Cancel\n   * @param confirmText The text for the confirm button . defaults to Ok\n   * @returns An Observable that is called if the user hits the Ok button.\n   */\n  public confirm(\n    question: string,\n    declineText = 'Cancel',\n    confirmText = 'Ok',\n    title?: string): Observable<void> {\n\n    let result: Subject<any> = new Subject();\n\n    this.showDialog({\n      title: title,\n      message: question,\n      actions: [\n        {\n          handler: () => {\n            result.next(null);\n            result.complete();\n          }, text: confirmText\n        },\n        {\n          handler: () => {\n            result.error(null);\n\n          }, text: declineText, isClosingAction: true\n        }\n      ],\n      isModal: true\n    });\n\n    return result.asObservable();\n  }\n\n  /**\n   * Shows a dialog that is specified by the provided configuration.\n   * @param config The simple dialog configuration.\n   * @returns An Observable that returns the MdlDialogReference.\n   */\n  public showDialog(config: IMdlSimpleDialogConfiguration): Observable<MdlDialogReference> {\n\n    if (config.actions.length === 0 ) {\n      throw new Error('a dialog mus have at least one action');\n    }\n\n    let internalDialogRef = new InternalMdlDialogReference(config);\n\n    let providers = [\n      { provide: MdlDialogReference, useValue: new MdlDialogReference(internalDialogRef) },\n      { provide: MDL_CONFIGUARTION, useValue: config}\n    ];\n\n    let hostComponentRef = this.createHostDialog(internalDialogRef, config);\n\n    let cRef = this.createComponentInstance(\n      hostComponentRef.instance.dialogTarget,\n      providers,\n      MdlSimpleDialogComponent);\n\n    return this.showHostDialog(internalDialogRef.dialogRef, hostComponentRef);\n  }\n\n  /**\n   * Shows a dialog that is specified by the provided configuration.\n   * @param config The custom dialog configuration.\n   * @returns An Observable that returns the MdlDialogReference.\n   */\n  public showCustomDialog(config: IMdlCustomDialogConfiguration): Observable<MdlDialogReference> {\n\n    let internalDialogRef = new InternalMdlDialogReference(config);\n\n    let providers: Provider[] = [\n      { provide: MdlDialogReference, useValue: new MdlDialogReference(internalDialogRef) }\n    ];\n\n    if (config.providers){\n      providers.push(...config.providers);\n    }\n\n    let hostComponentRef = this.createHostDialog(internalDialogRef, config);\n\n    this.createComponentInstance(hostComponentRef.instance.dialogTarget, providers, config.component);\n\n    return this.showHostDialog(internalDialogRef.dialogRef, hostComponentRef);\n  }\n\n  public showDialogTemplate(template: TemplateRef<any>, config: IMdlDialogConfiguration): Observable<MdlDialogReference> {\n\n    let internalDialogRef = new InternalMdlDialogReference(config);\n\n    let hostComponentRef = this.createHostDialog(internalDialogRef, config);\n\n    hostComponentRef.instance.dialogTarget.createEmbeddedView(template);\n\n    return this.showHostDialog(internalDialogRef.dialogRef, hostComponentRef);\n  }\n\n  private showHostDialog(dialogRef: MdlDialogReference, hostComponentRef: ComponentRef<MdlDialogHostComponent> ) {\n\n    let result: Subject<any> = new Subject();\n\n    setTimeout( () => {\n      result.next(dialogRef);\n      result.complete();\n      hostComponentRef.instance.show();\n    });\n\n    return result.asObservable();\n  }\n\n  private createHostDialog(internalDialogRef: InternalMdlDialogReference, dialogConfig: IMdlDialogConfiguration) {\n\n    let viewContainerRef = this.mdlDialogOutletService.viewContainerRef;\n    if (!viewContainerRef) {\n      throw new Error('You did not provide a ViewContainerRef. ' +\n        'Please see https://github.com/mseemann/angular2-mdl/wiki/How-to-use-the-MdlDialogService');\n    }\n\n    let providers: Provider[] = [\n      { provide: MDL_CONFIGUARTION, useValue: dialogConfig },\n      { provide: InternalMdlDialogReference, useValue: internalDialogRef}\n    ];\n\n    let hostDialogComponent = this.createComponentInstance(viewContainerRef, providers, MdlDialogHostComponent);\n\n    internalDialogRef.hostDialogComponentRef  = hostDialogComponent;\n    internalDialogRef.isModal                 = dialogConfig.isModal;\n\n    internalDialogRef.closeCallback = () => {\n      this.popDialog(internalDialogRef);\n      hostDialogComponent.instance.hide(hostDialogComponent);\n    };\n    this.pushDialog(internalDialogRef);\n\n    return hostDialogComponent;\n  }\n\n  private pushDialog(dialogRef: InternalMdlDialogReference) {\n    this.openDialogs.push(dialogRef);\n    this.orderDialogStack();\n  }\n\n  private popDialog(dialogRef: InternalMdlDialogReference) {\n    this.openDialogs.splice(this.openDialogs.indexOf(dialogRef), 1);\n    this.orderDialogStack();\n  }\n\n  private orderDialogStack() {\n    // +1 because the overlay may have MIN_DIALOG_Z_INDEX if the dialog is modal.\n    let zIndex = MIN_DIALOG_Z_INDEX + 1;\n\n\n    this.openDialogs.forEach( (iDialogRef) => {\n      iDialogRef.hostDialog.zIndex = zIndex;\n      // +2 to make room for the overlay if a dialog is modal\n      zIndex += 2;\n    });\n\n    this.mdlDialogOutletService.hideBackdrop();\n\n    // if there is a modal dialog append the overloay to the dom - if not remove the overlay from the body\n    let topMostModalDialog: InternalMdlDialogReference = this.getTopMostInternalDialogRef();\n    if (topMostModalDialog) {\n      // move the overlay diredct under the topmos modal dialog\n      this.mdlDialogOutletService.showBackdropWithZIndex(topMostModalDialog.hostDialog.zIndex - 1);\n    }\n\n  }\n\n  private getTopMostInternalDialogRef(): InternalMdlDialogReference {\n    let topMostModalDialog: InternalMdlDialogReference = null;\n\n    for (var i = (this.openDialogs.length - 1); i >= 0; i--) {\n      if (this.openDialogs[i].isModal) {\n        topMostModalDialog = this.openDialogs[i];\n        break;\n      }\n    }\n    return topMostModalDialog;\n  }\n\n  private onBackdropClick(){\n    let topMostModalDialog: InternalMdlDialogReference = this.getTopMostInternalDialogRef();\n    if (topMostModalDialog.config.clickOutsideToClose){\n      topMostModalDialog.hide();\n    }\n  }\n\n  private createComponentInstance <T> (\n    viewContainerRef: ViewContainerRef,\n    providers: Provider[],\n    component: Type<T> ): ComponentRef<any> {\n\n    let cFactory            = this.componentFactoryResolver.resolveComponentFactory(component);\n\n    let resolvedProviders   = ReflectiveInjector.resolve(providers);\n    let parentInjector      = viewContainerRef.parentInjector;\n    let childInjector       = ReflectiveInjector.fromResolvedProviders(resolvedProviders, parentInjector);\n\n    return viewContainerRef.createComponent(cFactory, viewContainerRef.length, childInjector);\n  }\n\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n{type: ApplicationRef, },\n{type: MdlDialogOutletService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}