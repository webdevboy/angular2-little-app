{"version":3,"file":"mdl-dialog-configuration.js","sourceRoot":"","sources":["../../../src/lib/components/dialog/mdl-dialog-configuration.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  ViewContainerRef,\n  Type,\n  Provider,\n  ElementRef\n} from '@angular/core';\nimport { MdlButtonComponent } from '../button/mdl-button.component';\n\n/**\n * @deprecated cusotm dialogs no longer need to implement this interface\n */\nexport interface IMdlCustomDialog {\n  viewContainerRef: ViewContainerRef;\n}\n\n/**\n * The simple Dialog can have as much actions as needed by the user.\n */\nexport interface IMdlDialogAction {\n  /**\n   * the handler is a callback function. this funciton will be called if\n   * the action button was clicked.\n   */\n  handler: () => void;\n  /**\n   * the text of the action button\n   */\n  text: string;\n  /**\n   * is this a closing aciton? means the action is called if the user pressed the esc key.\n   */\n  isClosingAction?: boolean;\n}\n\n/**\n * rect from where the dialog should be opened or closed to.\n */\nexport interface IOpenCloseRect {\n  height: number;\n  left: number;\n  top: number;\n  width: number;\n}\n/**\n * Dialog configuration for all dialogs (simple or custom)\n */\nexport interface IMdlDialogConfiguration {\n\n  /**\n   * true if the dialog should be opened as modal.\n   */\n  isModal?: boolean;\n\n  /**\n   * true if the dialogs should animate. defaults to true.\n   */\n  animate?: boolean\n\n  /**\n   * css classes as space delimted list of classes applied to\n   * the dialog-host component. (e.g. a b -> <mdl-dialog-host-component class=\"a b\"...\n   */\n  classes?: any;\n\n  /**\n   * Key Value object with additional styles that will be applied to\n   * the dialog-host component. for example: {'width': '350px'}\n   */\n  styles?: {[key: string]: string};\n\n  /**\n   * Close the dialog if the user clicks on the backdrop.\n   */\n  clickOutsideToClose?:boolean;\n\n  /**\n   * MdlButtonComponent or mouse event the dialog open animation should start from.\n   */\n  openFrom?: MdlButtonComponent | MouseEvent | IOpenCloseRect;\n\n  /**\n   *  MdlButtonComponent or mouse event  the dialog close animation shoul end.\n   */\n  closeTo?: MdlButtonComponent | MouseEvent | IOpenCloseRect;\n\n\n  /**\n   * The curation for the enter animation in ms. defaults to 300ms\n   */\n  enterTransitionDuration?: number;\n\n  /**\n   * The easing curve for the enter animation. defaults to cubic-bezier(0.0, 0.0, 0.2, 1)\n   */\n  enterTransitionEasingCurve?: string;\n\n  /**\n   * The curation for the leave animation in ms. defaults to 250ms\n   */\n  leaveTransitionDuration?: number;\n\n  /**\n   * The easing curve for the leave animation. defaults to cubic-bezier(0.0, 0.0, 0.2, 1)\n   */\n  leaveTransitionEasingCurve?: string;\n}\n\n/**\n * The simple dialog. Easy to use - dosn't need a special component.\n */\nexport interface IMdlSimpleDialogConfiguration extends IMdlDialogConfiguration {\n  /**\n   * the title of the dialog\n   */\n  title?: string;\n  /**\n   * the message that should be displayed (can be html)\n   */\n  message: string;\n  /**\n   * the actions that are used for this dialog (the order will be reversed by mdl.\n   */\n  actions: [IMdlDialogAction];\n  /**\n   * should the actions be displayed as full width actions. every aciton is one row.\n   */\n  fullWidthAction?: boolean;\n}\n\n/**\n * Configuration for a custom dialog. You need to provide a component that\n * should be used as the content of the dialog. the component must match the\n * fowllowing conditions:\n * - must be an entrycomponent (property of your module)\n * If youn need access to the MdlDialogReference you may inject it in your constructor:\n *\n * export class MyDialog {\n *\n *   constructor(private dialogref: MdlDialogReference){}\n *\n *   ...\n * }\n */\nexport interface IMdlCustomDialogConfiguration extends IMdlDialogConfiguration {\n  component: Type<any>;\n  providers?: Provider[];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}