{"version":3,"file":"internal-dialog-reference.js","sourceRoot":"","sources":["../../../src/lib/components/dialog/internal-dialog-reference.ts"],"names":[],"mappings":"OACO,EAAE,OAAO,EAAE,MAAM,cAAc;OAG/B,EAAE,kBAAkB,EAAE,MAAM,sBAAsB;AAGzD;;;;GAIG;AACH;IASE,oCAAmB,MAA+B;QAA/B,WAAM,GAAN,MAAM,CAAyB;QAN1C,kBAAa,GAAiB,IAAI,OAAO,EAAE,CAAC;QAC5C,qBAAgB,GAAiB,IAAI,OAAO,EAAE,CAAC;QAEhD,YAAO,GAAG,KAAK,CAAC;QAIrB,IAAI,CAAC,SAAS,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC;IAED,sBAAK,kDAAU;aAAf;YACE,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC;QAC9C,CAAC;;;OAAA;IAEM,yCAAI,GAAX,UAAY,IAAU;QACpB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;QAC9B,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAEM,4CAAO,GAAd;QACE,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;QAC7B,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;IACnC,CAAC;IAEM,2CAAM,GAAb;QACE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;IAC3C,CAAC;IAEM,8CAAS,GAAhB;QACE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAC;IAC9C,CAAC;IACH,iCAAC;AAAD,CAAC,AAnCD,IAmCC","sourcesContent":["import { ComponentRef } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\n\nimport { MdlDialogReference } from './mdl-dialog.service';\nimport { IMdlDialogConfiguration } from './mdl-dialog-configuration';\n\n/**\n * Internal representation of the dialog ref. the service\n * user should not have access to the created components\n * and internal implementations.\n */\nexport class InternalMdlDialogReference {\n\n  public hostDialogComponentRef: ComponentRef<any>;\n  private onHideSubject: Subject<any> = new Subject();\n  private onVisibleSubject: Subject<any> = new Subject();\n  public closeCallback: () => void;\n  public isModal = false;\n  public dialogRef: MdlDialogReference;\n\n  constructor(public config: IMdlDialogConfiguration){\n    this.dialogRef = new MdlDialogReference(this);\n  }\n\n  get  hostDialog() {\n    return this.hostDialogComponentRef.instance;\n  }\n\n  public hide(data?: any) {\n    this.onHideSubject.next(data);\n    this.onHideSubject.complete();\n    this.closeCallback();\n  }\n\n  public visible() {\n    this.onVisibleSubject.next();\n    this.onVisibleSubject.complete();\n  }\n\n  public onHide(): Observable<void> {\n    return this.onHideSubject.asObservable();\n  }\n\n  public onVisible(): Observable<void> {\n    return this.onVisibleSubject.asObservable();\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}