{"version":3,"file":"mdl-table.component.js","sourceRoot":"","sources":["../../../src/lib/components/table/mdl-table.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation\n} from '@angular/core';\n\nexport interface IMdlTableColumn {\n  key: string;\n  name: string;\n  sortable?: boolean;\n  numeric?: boolean;\n}\n\nexport interface IMdlTableModelItem {\n  selected: boolean;\n}\n\nexport interface IMdlTableModel {\n\n  columns: [IMdlTableColumn];\n  data: Array<IMdlTableModelItem>;\n}\n\nexport class MdlDefaultTableModel implements IMdlTableModel {\n\n  public columns: [IMdlTableColumn];\n  public data: Array<IMdlTableModelItem> = new Array<IMdlTableModelItem>();\n\n  constructor(columns: [IMdlTableColumn]) {\n    this.columns = columns;\n  }\n\n  public addAll(data: [IMdlTableModelItem]) {\n    this.data.push(...data);\n  }\n\n}\n\n\nconst template = `\n        <table class=\"mdl-data-table\">\n           <thead>\n           <tr>\n              <th *ngIf=\"selectable\">\n                 <mdl-checkbox mdl-ripple [ngModel]=\"isAllSelected()\" (ngModelChange)=\"toogleAll()\"></mdl-checkbox>\n              </th>\n              <th *ngFor=\"let column of model.columns\"\n                  [ngClass]=\"{'mdl-data-table__cell--non-numeric': !column.numeric}\">\n                 {{column.name}}\n              </th>\n           </tr>\n           </thead>\n           <tbody>\n           <tr *ngFor=\"let data of model.data; let i = index\" [ngClass]=\"{'is-selected': selectable && data.selected}\">\n              <td *ngIf=\"selectable\">\n                 <mdl-checkbox mdl-ripple\n                      [(ngModel)]=\"data.selected\"\n                      (ngModelChange)=\"selectionChanged(data)\"></mdl-checkbox>\n              </td>\n              <td *ngFor=\"let column of model.columns\"\n                  [ngClass]=\"{'mdl-data-table__cell--non-numeric': !column.numeric}\">\n                 {{data[column.key]}}\n              </td>\n           </tr>\n           </tbody>\n        </table>  \n    `;\nconst styles = [\n  `\n    :host{\n      display:inline-block;\n    }\n    `\n];\n\n\nexport class MdlTableComponent {\n\n   public model: IMdlTableModel;\n\n  public selectable = false;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'mdl-table',\n  template: template,\n  styles: styles,\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'model': [{ type: Input, args: ['table-model', ] },],\n};\n}\n\n\n\nexport class MdlSelectableTableComponent extends MdlTableComponent {\n\n   public model: IMdlTableModel;\n   public selected: Array<IMdlTableModelItem>;\n   public selectionChange = new EventEmitter();\n\n  public selectable = true;\n  public allSelected = false;\n\n  public isAllSelected() {\n    return this.model.data.every( data => data.selected);\n  }\n\n  protected toogleAll() {\n    let selected = !this.isAllSelected();\n    this.model.data.forEach( data => data.selected = selected);\n    this.updateSelected();\n  }\n\n  private updateSelected() {\n    this.selected = this.model.data.filter( data => data.selected);\n    this.selectionChange.emit({value: this.selected});\n  }\n\n  protected selectionChanged(data) {\n    this.updateSelected();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'mdl-table-selectable',\n  template: template,\n  styles: styles,\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'model': [{ type: Input, args: ['table-model', ] },],\n'selected': [{ type: Input, args: ['table-model-selected', ] },],\n'selectionChange': [{ type: Output, args: ['table-model-selectionChanged', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}