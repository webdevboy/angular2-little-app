{"version":3,"file":"mdl-badge.directive.js","sourceRoot":"","sources":["../../../src/lib/components/badge/mdl-badge.directive.ts"],"names":[],"mappings":"OAAO,EACL,SAAS,EACT,KAAK,EAEL,UAAU,EACV,QAAQ,EACR,QAAQ,EAET,MAAM,eAAe;AAGtB;IAME,2BAAoB,UAAsB,EAAU,QAAkB;QAAlD,eAAU,GAAV,UAAU,CAAY;QAAU,aAAQ,GAAR,QAAQ,CAAU;QACpE,IAAI,CAAC,EAAE,GAAG,UAAU,CAAC,aAAa,CAAC;IACrC,CAAC;IAEM,uCAAW,GAAlB;QACE,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,EAAE,YAAY,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IACjF,CAAC;IAEI,4BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,aAAa;oBACvB,IAAI,EAAE;wBACJ,mBAAmB,EAAE,MAAM;qBAC5B;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,gCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;QACpB,EAAC,IAAI,EAAE,QAAQ,GAAG;KACjB,EAH6F,CAG7F,CAAC;IACK,gCAAc,GAA2C;QAChE,iBAAiB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,WAAW,EAAG,EAAE,EAAE;KAC3D,CAAC;IACF,wBAAC;AAAD,CAAC,AA9BD,IA8BC;AAGD;IAAA;IAWA,CAAC;IAX6C,mCAAU,GAA0B;QAClF,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,qBAAqB;oBAC/B,IAAI,EAAE;wBACJ,4BAA4B,EAAE,MAAM;qBACrC;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,uCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,+BAAC;AAAD,CAAC,AAXD,IAWC;AAGD;IAAA;IAWA,CAAC;IAXkD,wCAAU,GAA0B;QACvF,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,2BAA2B;oBACrC,IAAI,EAAE;wBACJ,kCAAkC,EAAE,MAAM;qBAC3C;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,4CAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,oCAAC;AAAD,CAAC,AAXD,IAWC;AAGD,IAAM,oBAAoB,GAAG,CAAC,iBAAiB,EAAE,wBAAwB,EAAE,6BAA6B,CAAC,CAAC;AAG1G;IAAA;IAiBA,CAAC;IAhBe,sBAAO,GAArB;QACE,MAAM,CAAC;YACL,QAAQ,EAAE,cAAc;YACxB,SAAS,EAAE,EAAE;SACd,CAAC;IACJ,CAAC;IACI,yBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;oBACvB,OAAO,EAAE,EAAE;oBACX,OAAO,EAAE,oBAAoB;oBAC7B,YAAY,EAAE,oBAAoB;iBACnC,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,6BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,qBAAC;AAAD,CAAC,AAjBD,IAiBC","sourcesContent":["import {\n  Directive,\n  Input,\n  OnChanges,\n  ElementRef,\n  Renderer,\n  NgModule,\n  ModuleWithProviders\n} from '@angular/core';\n\n\nexport class MdlBadgeDirective implements OnChanges {\n\n  private el: HTMLElement;\n\n   public mdlBadgeContent: string;\n\n  constructor(private elementRef: ElementRef, private renderer: Renderer) {\n    this.el = elementRef.nativeElement;\n  }\n\n  public ngOnChanges() {\n    this.renderer.setElementAttribute(this.el, 'data-badge', this.mdlBadgeContent);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdl-badge]',\n  host: {\n    '[class.mdl-badge]': 'true'\n  }\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'mdlBadgeContent': [{ type: Input, args: ['mdl-badge', ] },],\n};\n}\n\n\nexport class MdlBadgeOverlapDirective {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdl-badge-overlap]',\n  host: {\n    '[class.mdl-badge--overlap]': 'true'\n  }\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\n\nexport class MdlBadgeNoBackgroundDirective {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdl-badge-no-background]',\n  host: {\n    '[class.mdl-badge--no-background]': 'true'\n  }\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\n\nconst MDL_BADGE_DIRECTIVES = [MdlBadgeDirective, MdlBadgeOverlapDirective, MdlBadgeNoBackgroundDirective];\n\n\nexport class MdlBadgeModule {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdlBadgeModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [],\n  exports: MDL_BADGE_DIRECTIVES,\n  declarations: MDL_BADGE_DIRECTIVES,\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}